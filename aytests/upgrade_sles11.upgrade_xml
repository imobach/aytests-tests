<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
  <add-on>
    <add_on_products config:type="list">
      <listentry>
        <media_url><![CDATA[{{REPO_SLE12_URL}}]]></media_url>
        <product>custom</product>
        <product_dir>/</product_dir>
        <name>Customized</name>
        <signature-handling>
          <accept_unknown_gpg_key config:type="boolean">true</accept_unknown_gpg_key>
          <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
        </signature-handling>
      </listentry>
    </add_on_products>
  </add-on>
  <general>
    <mode>
      <confirm config:type="boolean">false</confirm>
      <ntp_sync_time_before_installation>ntp.suse.de</ntp_sync_time_before_installation>
    </mode>
    <!-- test the self-update feature (https://fate.suse.com/319716) -->
    <self_update_url><![CDATA[{{REPO_SLE12_URL}}]]></self_update_url>
    <signature-handling>
      <!-- the testing self-update repository is not signed -->
      <accept_unsigned_file config:type="boolean">true</accept_unsigned_file>
      <accept_unknown_gpg_key>
        <all config:type="boolean">true</all>
      </accept_unknown_gpg_key>
    </signature-handling>
  </general>

  <firewall>
    <FW_SERVICES_EXT_TCP>8080</FW_SERVICES_EXT_TCP>
  </firewall>

  <scripts>

    <pre-scripts config:type="list">
      <script>
        <filename>1_prescript.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
# Due the DUD yast2-ca-managegment has been installed into inst-sys too.
# This confuses AutoYaST due missing additional packages like some perl modules in inst-sys.
# So we are removing the affected ca-management code again.
rm /usr/share/YaST2/clients/ca_mgm_auto.rb
        ]]></source>
      </script>
      <script>
        <filename>2_prescript.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
BASE='/root/userscripts'
STR="1:prescript:"
ST='clean'
RES=`fdisk -l | grep -E '^/dev/vda'`
if [ -n "$RES" ];then
   STR=$STR'partition already defined:'
   ST='exist'
else
   STR=$STR'not yet mounted:'
fi
STR=$STR$ST
mkdir $BASE
echo $STR
echo $STR > $BASE/userscr.log
#cp /tmp/1_prescript.sh $BASE
        ]]></source>
      </script>
      <script>
        <filename>3_prescript_remote.sh</filename>
        <interpreter>shell</interpreter>
        <source><![CDATA[#!/bin/sh
STR="1b:prescript-remote:ok"
BASE='/root/userscripts'
echo $STR
echo $STR >> $BASE/userscr.log
        ]]></source>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
      </script>
    </pre-scripts>

    <post-scripts config:type="list">
      <script>
        <filename>yast_clone.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <source><![CDATA[#!/bin/sh
mv /var/run/zypp.pid /var/run/zypp.sav
test -f /root/autoinst.xml && rm /root/autoinst.xml
yast clone_system
mv /var/run/zypp.sav /var/run/zypp.pid
        ]]></source>
      </script>
    </post-scripts>

    <chroot-scripts config:type="list">
      <script>
        <filename>3_chroot.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
STR="3:chroot:"
ST='ok'
BASE='/root/userscripts'
if chroot /mnt rpm -q glibc ;then
  STR=$STR' glibc installed:'
else
  STR=$STR' glibc not installed!:'
  ST='fail'
fi
STR=$STR$ST
echo $STR
echo $STR >> $BASE/userscr.log
touch /rebootflag
#cp /tmp/3_chroot.sh $BASE
ls -l $BASE
mv $BASE /mnt/$BASE
ls -l /mnt/$BASE
        ]]></source>
      <chrooted config:type="boolean">false</chrooted>
      </script>
      <script>
        <filename>chroot_zypper.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
	<feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
# This repo will be loaded via http network but WEBrick could
# have already been disabled and the repository is not available
# anymore at that time. But we do not need it anymore. So we
# are removing it before booting the second stage.
zypper rr Customized
        ]]></source>
      <chrooted config:type="boolean">true</chrooted>
      </script>
    </chroot-scripts>

    <init-scripts config:type="list">
      <script>
        <filename>init_ssh.sh</filename>
        <chrooted config:type="boolean">true</chrooted>
        <interpreter>shell</interpreter>
        <source><![CDATA[
  chkconfig sshd on
  rcsshd start
]]></source>
      </script>
      <script>
        <filename>5_post.sh</filename>
        <interpreter>shell</interpreter>
        <location/>
        <feedback config:type="boolean">false</feedback>
        <feedback_type>error</feedback_type>
        <source><![CDATA[#!/bin/sh
      STR="5:init:"
      PARENT='/usr/lib/YaST2/bin/autoyast-initscripts.sh'
      BASE='/root/userscripts'
      PPIDNAME=`ps -p $PPID -fh -o cmd`
      STR=$STR"started by: $PPID = $PPIDNAME:"
      BPPIDNAME=`echo "$PPIDNAME" | sed -r s'@^(.*)\s@@'`
      ST='ok'
      if [ "$PARENT" != "$BPPIDNAME" ];then
        STR=$STR':incorrect parent:'
        ST='fail'
      else
        STR=$STR':parent correct:'
      fi      
      STR=$STR$ST
      echo $STR
      echo $STR >> $BASE/userscr.log
      ls -l $BASE
      ]]></source>
        <network_needed config:type="boolean">false</network_needed>
      </script>
    </init-scripts>
  </scripts>
  <report>
    <errors>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </errors>
    <messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </messages>
    <warnings>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">5</timeout>
    </warnings>
    <yesno_messages>
      <log config:type="boolean">true</log>
      <show config:type="boolean">true</show>
      <timeout config:type="integer">0</timeout>
    </yesno_messages>
  </report>
  <users config:type="list">
    <user>
      <encrypted config:type="boolean">false</encrypted>
      <fullname>suse</fullname>
      <gid>100</gid>
      <home>/home/suse</home>
      <shell>/bin/bash</shell>
      <uid>1001</uid>
      <user_password>nots3cr3t</user_password>
      <username>suse</username>
      <authorized_keys config:type="list">
        <authorized_key>Tunnel="0" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKLt1vnW2vTJpBp3VK91rFsBvpY97NljsVLdgUrlPbZ/L51FerQQ+djQ/ivDASQjO+567nMGqfYGFA/De1EGMMEoeShza67qjNi14L1HBGgVojaNajMR/NI2d1kDyvsgRy7D7FT5UGGUNT0dlcSD3b85zwgHeYLidgcGIoKeRi7HpVDOOTyhwUv4sq3ubrPCWARgPeOLdVFa9clC8PTZdxSeKp4jpNjIHEyREPin2Un1luCIPWrOYyym7aRJEPopCEqBA9HvfwpbuwBI5F0uIWZgSQLfpwW86599fBo/PvMDa96DpxH1VlzJlAIHQsMkMHbsCazPNC0++Kp5ZVERiH vagrant@localhost.net</authorized_key>
        <authorized_key>non valid ssh key</authorized_key>
      </authorized_keys>
    </user>
  </users>
  <upgrade>
    <only_installed_packages config:type="boolean">false</only_installed_packages>
    <stop_on_solver_conflict config:type="boolean">false</stop_on_solver_conflict>
  </upgrade>
  <backup>
    <sysconfig config:type="boolean">true</sysconfig>
    <modified config:type="boolean">true</modified>
    <remove_old config:type="boolean">true</remove_old>
  </backup>

</profile>
